正则表达式(RE)
　　import re

一、动机
   1.文本处理已经成为计算机的常见工作（提取文本中所有的'hello world'或'Hello world'）
   2.对文本内容的搜索，定位，提取逻辑比较复杂
   3.为了快速方便的解决上述问题，产生了正则表达式

二、简介
　　定义: 即文本的高级匹配模式，提供搜索，替换，查找等功能。其本质是一系列由字符和特殊符号构成的字串，
　　　　　这个字串即正则表达式
　　匹配原理: 通过普通字符和有特定含义的字符来组成字符串，用以描述一定的字符串规则，比如重复，位置等，
　　　　　来表达一类特定的字符串内容。

三、元字符的使用
　
　1.普通字符 (除了正则表达式字符外的字符)
　　　匹配原则: 每个普通字符匹配对应的字符，
       In [1]: import re

       In [2]: re.findall('a','abcdeabcd')
       Out[2]: ['a', 'a']

    注意　正则表达式永远是作为一个规则整体匹配
    　　　python中正则表达式可以匹配中文
  2.或　
  　　元字符: ｜
  　匹配规则: 匹配　｜　左右两边任一个正则规则即可
  　　　In [5]: re.findall('a|e','abcdeabcd')
　　　　Out[5]: ['a', 'e', 'a']

  3.匹配开始位置
  　　元字符: ^
    匹配规则: 使用^ 规定目标字符串开头位置
        In [6]: re.findall('^hello','abchellodeabcd')
        Out[6]: []

        In [7]: re.findall('^hello','helloabchellodeabcd')
        Out[7]: ['hello']

  4.匹配结尾位置
  　　元字符: $
   　匹配规则: 使用$ 规定目标字符串结束位置
   　　　In [12]: re.findall('hel$','sfHhel,dedlhel')
        Out[12]: ['hel']

  注意: 正则表达式中如果有^ $ 必然出现在开始和结尾，
  　　　如果同时出现，则正则必须匹配目标字符串全部内容。

  5.匹配任意字符
    元字符: .
    匹配规则: 匹配除换行外的任意一个字符
    　　>>> re.findall('小.','小红说小王的哥哥小度看见小李')
　　　　['小红', '小王', '小度', '小李']
　
　6.匹配字符集中字符
　　元字符: [字符集]
　　匹配规则: 匹配字符集中任意一个字符
　　表达形式: [#abc好坏] -->匹配[]内任意一个字符
　　　　　　　[0-9][a-z][A-Z] -->匹配区间内任意一个字符
　　　　　　　[-_#0-9a-z]-->混合书写，区间写在后面
      >>> re.findall('[aeiou]','hello world')
      ['e', 'o', 'o']
　
　7.匹配字符集反集
　　元字符: [^字符集]
　　匹配规则: 匹配除了字符集中的任意一个字符（字符集的反集的任意一个字符）
　　　>>> re.findall('[^a-z0-9A-Z]',　'hello World,中国建国70周年-2019年')
　　　[' ', ',', '中', '国', '建', '国', '周', '年', '-', '年']
　　　>>> re.findall('^[^a-z0-9A-Z]','*hello World,中国建国70周年－2019年')
　　　['*']

  8.匹配重复
    元字符: *
    匹配规则: 匹配前面的字符出现0次或1次或多次
    >>> re.findall('ab*', 'hello,alex,my baby, abbbbbdeal')
    ['a', 'ab', 'abbbbb', 'a'
    注意: ab* 当b 出现0次时是a 不是ab

  9.匹配重复
  　元字符: +
    匹配规则: 匹配前面的字符出现1次或多次 
    >>> re.findall('ab+', 'hello,alex,my baby, abbbbbdeal')
    ['ab', 'abbbbb']

    # 大写字母开头的单词
    >>> re.findall('[A-Z][a-z]*', 'Hello,Alex,my Baby, abbbbbdEal')
    ['Hello', 'Alex', 'Baby', 'Eal']

  10.匹配重复
  　　元字符: ?
     匹配规则: 匹配前面的字符出现0次或1次
     >>> re.findall('ab?', 'alex,my baby, abbbbbdeal')
     ['a', 'ab', 'ab', 'a']

  11.匹配重复
  　　元字符: {n}
     匹配规则: 匹配前面的字符出现n次
    >>> re.findall('[0-9]{11}', '1372546528454565245215542541254')
    ['13725465284', '54565245215']

  12.匹配重复
  　　元字符: {m,n}
     匹配规则: 匹配前面的字符出现m－n次，小于m次不能匹配，多余n次的不要
    >>> re.findall('[0-9a-zA-Z]{3,5}', 'abc1375CHINA 2151254')
    ['abc13', '75CHI', '21512']

  13.匹配任意(非)数字字符
  　　元字符: \d  \D
     匹配规则: \d匹配任意数字字符 　[0-9]
     　　　　　 \D匹配任意非数字字符 [^0-9]
     >>> re.findall('13\d{9}', '13abcdd13752151254')
　　　['13752151254']
　　　>>> re.findall('13\D{9}', '13abcddSLAFLA13752151254')
　　　['13abcddSLAF']

  14.匹配任意(非)普通字符
  　　元字符: \w  \W
     匹配规则: \w匹配任意普通字符 　
     　　　　　 \W匹配任意非普通字符 
　　　说明: 数字字母下划线及汉字是普通字符
　　>>> re.findall('\w+\W+\w+', 'his father is a teacher')
　　['his father', 'is a']

　
　15.匹配(非)空字符
　　　元字符: \s  \S
     匹配规则: \s匹配任意空字符 　　　　
              \S匹配任意非空字符 
　　　　说明: 空字符是指: 空格　\n \t \v \f \r

 16.匹配开头结尾位置
 　　元字符: \A  \Z
    匹配规则: 相当　^  $

 17.匹配(非)单词边界 
 　　元字符: \b  \B
    匹配规则: \b 匹配单词边界位置
    　　　　　\B 匹配非单词边界位置  
    说明: 数字字母下划线(汉字)　和其他字符的交界为单词边界

    >>> re.findall(r'\bis\b', 'his father is a teacher')
　　['is']

总结:
   匹配单个字符　. [...] [^...] \d  \D  \w  \W   \s  \S
   匹配重复  *  +  ?  {n} {m,n}
   匹配位置 ^ $  \A  \Z  \b   \B
   其他   |  ()  \


四、正则表达式转义

　　1.特殊字符: .  *  +  ?  ^  $  []  ()  {}  |  \
   2.当正则表达式需要匹配特殊字符的时候，需要加转义

   　>>> re.findall('\\$\\d+','月薪$8000')
　　　['$8000']
　　　>>> re.findall('\$\d+','月薪$8000')
　　　['$8000']　　　＃　这里python进行字符串转义时，没有相应的转义，所以原样解释为'\$\d+',结果也能匹配出来，
                   ＃　但是如果'\b'就会被转义成退格

    >>> re.findall('\\\\b',r'peo匹配 \b 字符')
    ['\\b']

   3.raw 字符串
   　　字符串　　　　　正则　　　　　　目标
    '\\$\\d+'  --> \$\d+   --->   '$8000'
　　　r'\$\d+'  --> \$\d+   --->   '$8000'
   raw 字符串                                ?????????????????????????????????????

五、贪婪　和　非贪婪
　　　贪婪模式: 正则表达式的重复匹配总是尽可能向后匹配更多的内容，比如: *  +  ?  {m,n} 
     非贪婪:  满足重复条件即可，不向后匹配更多内容
     　贪婪--> 非贪婪　: *?  +?  ??  {m,n}?
                                           ???????????????????????????????????????
　　　
六、正则表达式分组
    定义: 使用()可以为正则表达式建立内部分组，子组是正则表达式的一个内部整体。

    作用: 1. 可以被作为内部整体操作，改变元字符的操作对象
 　　    >>> re.search(r'(ab)+','ababcdabef').group()
　　    'abab'
　　　    >>> re.search(r'(张|李)\w','张三李四').group()
　　    '张三'
　　　    >>> re.search(r'(张|李)\w+','张三李四').group()
　　    '张三李四'

　　　　　2.匹配到内容时子组对应部分可以单独提取group(1)
    
    捕获组(有名字的子组)
    　　>>> re.search(r'(?P<pig>ab)cdef', 'abcdefgh').group()
       'abcdef'
      作用: 表达一定的含义，也可以通过名称获取捕获组内容

    子组注意事项:
       【1】一个正则表达式中可以有多个子组
       【2】子组不要重叠或者过多嵌套
       【3】子组不会影响正则整体匹配的原则
       【4】子组从外到内，从左到右计数
       　　((ab)c(ef))   

七、正则表达式匹配原则
   1.正确性: 能够正确匹配到目标字符串内容
   2.排他性: 除了目标内容，尽可能不会匹配到其他内容
   3.全面性: 尽可能做到对目标字符串考虑全面，不遗漏
   
八、python re 模块　　是属于标准库模块   
　　regex = complie(pattern,falgs = 0)
     功能　生成正则表达式对象
     参数　　pattern  正则表达式
     　　　　flags 　功能标识位，扩展正则表达式功能
     返回值　正则表达式对象

     re.findall(pattern,string,flags = 0)
        功能：使用正则表达式匹配目标字符串
        参数：pattern 正则
        　　　string  目标字符串
        返回值：匹配内容列表，如果正则表达式由了子组则值得到子组对应内容

     regex.findall(string,pos,endpos)
        功能：使用正则表达式匹配目标字符串
        参数：string  目标字符串
        　　　pos 设置匹配目标字符串开始位置
        　　　endpos 设置匹配目标字符串结束位置
        返回值：匹配内容列表，如果正则表达式由了子组则值得到子组对应内容

    re.split(pattern,string,flags = 0)
        功能：使用正则表达式匹配内容切割目标字符串
        参数：pattern 正则
        　　　string  目标字符串
        返回值：切割后的内容列表


    re.sub(pattern,replace,string,max,flags)
        功能：使用指定字符串替换正则表达式匹配内容
        参数：pattern 正则
        　　　replace 指定字符串
        　　　string  目标字符串
        　　　max  最多匹配几处
        返回值：切割后的内容列表     
     re.subn(pattern,replace,string,max,flags)   
       用法同sub 返回值是多了　匹配替换的个数的元组    

    re.finditer(pattern,string,flags)   
        功能：使用正则表达式匹配目标内容
        参数：pattern 正则
        　　　string  目标字符串
        返回值：匹配结果的迭代对象

    re.fullmatch(pattern,string,flags)   
    功能：使用正则表达式完全匹配目标内容  加了^ $
    参数：pattern 正则
    　　　string  目标字符串
    返回值：匹配结果的match对象         
    
    re.match(pattern,string,flags)   
    功能：使用正则表达式匹配目标字符串的开头  加了　^
    参数：pattern 正则
    　　　string  目标字符串
    返回值：匹配结果的match对象   
    
    re.match(pattern,string,flags)   
    功能：使用正则表达式匹配目标字符串第一处匹配内容  加了　^
    参数：pattern 正则
    　　　string  目标字符串
    返回值：匹配结果的match对象  



regex对象属性变量　　
   　flags  标识位值
   >>> pattern = r'(ab)cd(?P<pig>ef)'
   >>> regex= re.compile(pattern)
   >>> regex.flags
   32   # 二进制表示

    pattern　正则表达式
    >>> regex.pattern
　　'(ab)cd(?P<pig>ef)'

    groups　　子组数量
    >>> regex.groups
　　2

    groupindex　捕获组名和组序号（1开始）组成的字典
    >>> regex.groupindex
　　mappingproxy({'pig': 2})



match 对象的属性和方法
   1.属性变量
    pos  # 目标字符串开始位置
    endpos #目标字符串结束位置
    re  # 正则表达式
    string # 目标字符串
    lastgroup # 最后一组的组名
    lastindex # 最后一组的序号

   2.属性方法
   　span() 获取匹配到内容的起止位置
   　start() 获取匹配到内容的开始位置
   　end() 获取匹配到内容的终止位置
     groups() 获取每个子组对应的内容
     groupdict()　获取捕获组字典　组名为键，对应内容为值
     group(n=0)
         功能　获取match 对象对应的内容
         参数　数字表示获取相应的子组匹配内容，默认0表示全部匹配内容
         　　　子组名称表示对应捕获组的匹配内容
         返回值：匹配的字符串
   　

作业：
　　　1.熟练掌握正则表达式元字符
     2.将re模块调用函数使用regex 对象操作练习
     3.找一个文档，完成如下两个正则练习
     　*匹配出文档中所有大写字母开头单词
     　*匹配出所有数字，包含整数小数分数百分数，负数
     　*将所有日期格式　2018.7.12改为2018-7-12   


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
day2

flags


   3.常用标识位
     A == ASCII 元字符只能匹配ascii字符
     I == IGNORECASE 匹配时忽略大小写字符
     S == DOTALL 使　. 可以匹配换行符，真正做到能匹配任意一个字符
     M == MULTILINE  是^ $ 可以匹配每一行的开头结尾位置
     X == VERBOSE 为正则添加每行注释

   4.使用多个flags   


　　　
　　　
   　
   
    

   


　　　
　　　　　　

    　　
       
      
   

